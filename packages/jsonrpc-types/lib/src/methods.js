"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validators = exports.tx = exports.status = exports.sendTx = exports.query = exports.nextLightClientBlock = exports.networkInfo = exports.lightClientProof = exports.health = exports.gasPrice = exports.EXPERIMENTALValidatorsOrdered = exports.EXPERIMENTALTxStatus = exports.EXPERIMENTALSplitStorageInfo = exports.EXPERIMENTALReceipt = exports.EXPERIMENTALProtocolConfig = exports.EXPERIMENTALMaintenanceWindows = exports.EXPERIMENTALLightClientProof = exports.EXPERIMENTALLightClientBlockProof = exports.EXPERIMENTALGenesisConfig = exports.EXPERIMENTALCongestionLevel = exports.EXPERIMENTALChangesInBlock = exports.EXPERIMENTALChanges = exports.clientConfig = exports.chunk = exports.changes = exports.broadcastTxCommit = exports.broadcastTxAsync = exports.block = void 0;
/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 *
 * @generated
 */
const types_1 = require("./types");
/** Method definition for block RPC call */
exports.block = (0, types_1.defineMethod)("block");
/** Method definition for broadcast_tx_async RPC call */
exports.broadcastTxAsync = (0, types_1.defineMethod)("broadcast_tx_async");
/** Method definition for broadcast_tx_commit RPC call */
exports.broadcastTxCommit = (0, types_1.defineMethod)("broadcast_tx_commit");
/** Method definition for changes RPC call */
exports.changes = (0, types_1.defineMethod)("changes");
/** Method definition for chunk RPC call */
exports.chunk = (0, types_1.defineMethod)("chunk");
/** Method definition for client_config RPC call */
exports.clientConfig = (0, types_1.defineMethod)("client_config");
/** Method definition for EXPERIMENTAL_changes RPC call */
exports.EXPERIMENTALChanges = (0, types_1.defineMethod)("EXPERIMENTAL_changes");
/** Method definition for EXPERIMENTAL_changes_in_block RPC call */
exports.EXPERIMENTALChangesInBlock = (0, types_1.defineMethod)("EXPERIMENTAL_changes_in_block");
/** Method definition for EXPERIMENTAL_congestion_level RPC call */
exports.EXPERIMENTALCongestionLevel = (0, types_1.defineMethod)("EXPERIMENTAL_congestion_level");
/** Method definition for EXPERIMENTAL_genesis_config RPC call */
exports.EXPERIMENTALGenesisConfig = (0, types_1.defineMethod)("EXPERIMENTAL_genesis_config");
/** Method definition for EXPERIMENTAL_light_client_block_proof RPC call */
exports.EXPERIMENTALLightClientBlockProof = (0, types_1.defineMethod)("EXPERIMENTAL_light_client_block_proof");
/** Method definition for EXPERIMENTAL_light_client_proof RPC call */
exports.EXPERIMENTALLightClientProof = (0, types_1.defineMethod)("EXPERIMENTAL_light_client_proof");
/** Method definition for EXPERIMENTAL_maintenance_windows RPC call */
exports.EXPERIMENTALMaintenanceWindows = (0, types_1.defineMethod)("EXPERIMENTAL_maintenance_windows");
/** Method definition for EXPERIMENTAL_protocol_config RPC call */
exports.EXPERIMENTALProtocolConfig = (0, types_1.defineMethod)("EXPERIMENTAL_protocol_config");
/** Method definition for EXPERIMENTAL_receipt RPC call */
exports.EXPERIMENTALReceipt = (0, types_1.defineMethod)("EXPERIMENTAL_receipt");
/** Method definition for EXPERIMENTAL_split_storage_info RPC call */
exports.EXPERIMENTALSplitStorageInfo = (0, types_1.defineMethod)("EXPERIMENTAL_split_storage_info");
/** Method definition for EXPERIMENTAL_tx_status RPC call */
exports.EXPERIMENTALTxStatus = (0, types_1.defineMethod)("EXPERIMENTAL_tx_status");
/** Method definition for EXPERIMENTAL_validators_ordered RPC call */
exports.EXPERIMENTALValidatorsOrdered = (0, types_1.defineMethod)("EXPERIMENTAL_validators_ordered");
/** Method definition for gas_price RPC call */
exports.gasPrice = (0, types_1.defineMethod)("gas_price");
/** Method definition for health RPC call */
exports.health = (0, types_1.defineMethod)("health");
/** Method definition for light_client_proof RPC call */
exports.lightClientProof = (0, types_1.defineMethod)("light_client_proof");
/** Method definition for network_info RPC call */
exports.networkInfo = (0, types_1.defineMethod)("network_info");
/** Method definition for next_light_client_block RPC call */
exports.nextLightClientBlock = (0, types_1.defineMethod)("next_light_client_block");
/** Method definition for query RPC call */
exports.query = (0, types_1.defineMethod)("query");
/** Method definition for send_tx RPC call */
exports.sendTx = (0, types_1.defineMethod)("send_tx");
/** Method definition for status RPC call */
exports.status = (0, types_1.defineMethod)("status");
/** Method definition for tx RPC call */
exports.tx = (0, types_1.defineMethod)("tx");
/** Method definition for validators RPC call */
exports.validators = (0, types_1.defineMethod)("validators");
