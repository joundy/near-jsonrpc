/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 * 
 * @generated
 */
import { z } from "zod/v4";

/** Type alias for a method with type parameters */
export type Method<TRequest, TResponse, TError, DefaultTRequest = undefined> = {
    readonly methodName: string;
    readonly zodRequest: z.ZodType<TRequest>;
    readonly zodResponse: z.ZodType<TResponse>;
    readonly zodError: z.ZodType<TError>;
    readonly defaultRequest?: DefaultTRequest;
};

/** Function to create a method definition with type parameters */
export function defineMethod<TRequest, TResponse, TError, DefaultTRequest = undefined>(methodName: string, zodRequest: z.ZodType<TRequest>, zodResponse: z.ZodType<TResponse>, zodError: z.ZodType<TError>, defaultRequest?: DefaultTRequest): Method<TRequest, TResponse, TError, DefaultTRequest> {
    return { methodName, zodRequest, zodResponse, zodError, defaultRequest };
}

/** Type helper to extract the request type from a method */
export type RequestType<T extends Method<unknown, unknown, unknown, unknown>> = T extends Method<infer R, unknown, unknown, unknown> ? R : never;
/** Type helper to extract the response type from a method */
export type ResponseType<T extends Method<unknown, unknown, unknown, unknown>> = T extends Method<unknown, infer R, unknown, unknown> ? R : never;
/** Type helper to extract the error type from a method */
export type ErrorType<T extends Method<unknown, unknown, unknown, unknown>> = T extends Method<unknown, unknown, infer E, unknown> ? E : never;
/** Type helper to extract the default request type from a method */
export type DefaultRequestType<T extends Method<unknown, unknown, unknown, unknown>> = T extends Method<unknown, unknown, unknown, infer D> ? D : never;
/** Utility type to omit properties from a type in a distributive manner */
export type DistributiveOmit<T, K extends PropertyKey> = T extends unknown ? Pick<T, Exclude<keyof T, K>> : never;
