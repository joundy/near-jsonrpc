import { Project } from "ts-morph";
import { parseSchemaTypes } from "./parse-schema";
import { parseMethodTypes } from "./parse-method";
import { expandDiscriminatedMethods } from "./expand-discriminated-methods";

/**
 * This parser extracts methods and schemas from TypeScript definitions generated by openapi-typescript
 * (https://openapi-ts.dev/) for NEAR JSON-RPC API methods.
 */
export function parseOpenapiTS(openapiTS: string) {
  const project = new Project();

  // create a virtual file to access the typescript schemas from openapiTS
  const source = project.createSourceFile("__temp__openapi.ts", openapiTS);

  const methods = parseMethodTypes(source);

  // Expand discriminated methods like 'query' that have a 'request_type' property
  // These are split into separate method types based on their discriminator values
  // For example, 'view_account', 'view_code', 'call_function', etc. become distinct methods
  expandDiscriminatedMethods(source, methods);

  const ignoredSchemaSet = new Set<string>();
  for (const method of methods) {
    ignoredSchemaSet.add(method.error.fromSchema);
    ignoredSchemaSet.add(method.response.fromSchema);
    ignoredSchemaSet.add(method.request.fromSchema);
  }

  const schemas = parseSchemaTypes(source, ignoredSchemaSet);

  project.removeSourceFile(source);

  return {
    schemas,
    methods,
  };
}
