import { readFileSync } from "fs";
import { MethodType } from "../types";

export enum JsonRPCBodyType {
  id = "id",
  jsonrpc = "jsonrpc",
  method = "method",
  params = "params",
}

export enum JsonRpcResponseType {
  result = "result",
  error = "error",
}

const OPEN_API_LINK =
  "https://raw.githubusercontent.com/near/nearcore/refs/heads/master/chain/jsonrpc/openapi/openapi.json";

export async function getOpenApiSpec() {
  const response = await fetch(OPEN_API_LINK);
  const spec = await response.text();
  return spec;
}

export function getOpenApiSpecLocal(): string {
  return readFileSync("openapi.json", "utf-8");
}

export const GENERATED_COMMENT = `/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 * 
 * @generated
 */`;

export const GENERATED_COMMENT_WITH_CREDITS = `/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator with credits to openapi-typescript <3
 * 
 * @generated
 */`;

export function removeQuotes(text: string) {
  return text.replace(/['"]/g, "");
}

export function getUniqueSchemas(methods: MethodType[]) {
  const uniqueNeededSchemasSet = new Set<string>();
  for (const methodType of methods) {
    uniqueNeededSchemasSet.add(methodType.request.type);
    uniqueNeededSchemasSet.add(methodType.response.type);
    uniqueNeededSchemasSet.add(methodType.error.type);
  }
  return Array.from(uniqueNeededSchemasSet);
}

export function snakeToCamel(str: string) {
  return str.replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
}
