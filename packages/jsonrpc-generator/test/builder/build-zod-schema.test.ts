import { buildZodSchemas } from "../../src/builder/build-zod-schema";
import { ZodSchemaType } from "../../src/types";

describe("Build Zod Schema", () => {
  it("should build zod schemas text", () => {
    const fixture = {
      expect: `/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 * 
 * @generated
 */
import { z } from "zod/v4";

export const Foo = z.string();
export const Bar = z.number();
`,
    };

    const zodSchemaTypes: ZodSchemaType[] = [
      {
        schema: "Foo",
        type: "z.string()",
      },
      {
        schema: "Bar",
        type: "z.number()",
      },
    ];

    const result = buildZodSchemas(zodSchemaTypes, {});
    expect(result).toBe(fixture.expect);
  });

  it("should build zod schemas text with schema zodType & dependency", () => {
    const fixture = {
      expect: `/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 * 
 * @generated
 */
import { z } from "zod/v4";
import type { Action } from "./schemas";

export const Foo = z.string();
export const Bar: z.ZodType<Action> = z.number();
`,
    };

    const zodSchemaTypes: ZodSchemaType[] = [
      {
        schema: "Foo",
        type: "z.string()",
      },
      {
        schema: "Bar",
        type: "z.number()",
        zodType: "Action",
      },
    ];

    const result = buildZodSchemas(zodSchemaTypes, {
      schemaDependency: {
        location: "./schemas",
        dependencies: ["Action"],
      },
    });
    expect(result).toBe(fixture.expect);
  });
});
