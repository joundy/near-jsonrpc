import { buildMethods } from "../../src/builder/build-methods";
import { MethodType } from "../../src/types";

describe("Build Methods", () => {
  it("should build methods text", () => {
    const fixture = {
      expect: `/**
 * THIS FILE IS GENERATED - DO NOT MODIFY DIRECTLY
 * Generated by @near-jsonrpc/jsonrpc-generator
 * 
 * @generated
 */
import { defineMethod, DistributiveOmit } from "./types";
import type { FooRequest, FooResponse, FooError } from "./schemas";
import { FooRequestZodSchema, FooResponseZodSchema, FooErrorZodSchema } from "./zod-schemas";

/** Method definition for fooMethod RPC call */
export const fooMethod = defineMethod<FooRequest, FooResponse, FooError>("foo_method", FooRequestZodSchema, FooResponseZodSchema, FooErrorZodSchema);
`,
    };

    const methodTypes: MethodType[] = [
      {
        request: {
          method: "foo_method",
          type: "FooRequest",
          fromSchema: "DUMMY",
        },
        response: {
          type: "FooResponse",
          fromSchema: "DUMMY",
        },
        error: {
          type: "FooError",
          fromSchema: "DUMMY",
        },
      },
    ];

    const mappedSnakeCamelProperty = new Map<string, string>([
      ["hello_world", "helloWorld"],
      ["hello_world_2", "helloWorld2"],
      ["hello_world_3", "helloWorld3"],
      ["hello_world_4", "helloWorld4"],
    ]);
    const result = buildMethods(methodTypes, mappedSnakeCamelProperty, {
      schemasLocation: "./schemas",
      typesLocation: "./types",
      zodSchemaLocation: "./zod-schemas",
      zodSuffix: "ZodSchema",
    });
    expect(result).toBe(fixture.expect);
  });
});
